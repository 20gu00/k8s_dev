#!/bin/bash
#
### BEGIN INIT INFO
# Provides:   kube-addons
# Required-Start:    $local_fs $network $syslog kube-apiserver
# Required-Stop:
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Kubernetes Addon Object Manager
# Description:
#   Enforces installation of Kubernetes Addon Objects
### END INIT INFO


# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Kubernetes Addon Object Manager"
NAME=kube-addons
DAEMON_LOG_FILE=/var/log/$NAME.log
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/init.d/$NAME
KUBECTL=/usr/local/bin/kubectl

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

function addon_manager_async() {
    # The business logic for whether a given object should be created
    # was already enforced by salt, and /etc/kubernetes/addons is the
    # managed result is of that. Start everything below that directory.
    echo "== Kubernetes addon manager started at $(date -Is) =="
    for obj in $(find /etc/kubernetes/addons -name \*.yaml); do
	    ${KUBECTL} create -f ${obj} &
	    echo "++ addon ${obj} started in pid $! ++"
    done
    noerrors="true"
    for pid in $(jobs -p); do
	    wait ${pid} || noerrors="false"
	    echo "++ pid ${pid} complete ++"
    done
    if [ ${noerrors} == "true" ]; then
	    echo "== Kubernetes addon manager completed successfully at $(date -Is) =="
    else
	    echo "== Kubernetes addon manager completed with errors at $(date -Is) =="
    fi

    # We stay around so that status checks by salt make it look like
    # the service is good. (We could do this is other ways, but this
    # is simple.)
    sleep infinity
}

#
# Function that starts the daemon/service
#
do_start()
{
    addon_manager_async </dev/null >>${DAEMON_LOG_FILE} 2>&1 &
    echo $! > ${PIDFILE}
    disown
}

#
# Function that stops the daemon/service
#
do_stop()
{
    kill $(cat ${PIDFILE})
    rm ${PIDFILE}
    return
}

case "$1" in
  start)
        log_daemon_msg "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) log_end_msg 0 || exit 0 ;;
                2) log_end_msg 1 || exit 1 ;;
        esac
        ;;
  stop)
        log_daemon_msg "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) log_end_msg 0 ;;
                2) exit 1 ;;
        esac
        ;;
  status)
	    if [ ! -e ${PIDFILE} ]; then
	        exit 1
	    fi
	    pid=$(cat ${PIDFILE})
        # Checks that ${pid} is running AND is us.
        ps --no-headers ${pid} | grep ${SCRIPTNAME} > /dev/null || exit $?
        ;;

  restart|force-reload)
        log_daemon_msg "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) log_end_msg 0 ;;
                        1) log_end_msg 1 ;; # Old process is still running
                        *) log_end_msg 1 ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                log_end_msg 1
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac
