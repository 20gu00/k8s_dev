apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  serviceName: mysql
  replicas: 3  #一主二从
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      initContainers:
        - name: init-mysql
          image: mysql:5.7
          #[]
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Generate mysql server-id from pod ordinal index.
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              echo [mysqld] > /mnt/conf.d/server-id.cnf
              # Add an offset to avoid reserved server-id=0 value.
              echo server-id=$((100 + $ordinal)) >> /mnt/conf.d/server-id.cnf
              # Copy appropriate conf.d files from config-map to emptyDir.
              if [[ $ordinal -eq 0 ]]; then
                cp /mnt/config-map/master.cnf /mnt/conf.d/
              else
                cp /mnt/config-map/slave.cnf /mnt/conf.d/
              fi
          volumeMounts:
            - name: conf
              mountPath: /mnt/conf.d
            - name: config-map
              mountPath: /mnt/config-map
        #xtrbackup进行容器初始化数据的拷贝
        #使用ncat命令远程从前节点拷贝数据到本地
        #image: gcr.io/google-samples/xtrabackup:1.0
        - name: clone-mysql
          image: fxkjnj/xtrabackup:1.0
          command:
            - bash
            - "-c"
            - |
              set -ex
              # Skip the clone if data already exists.
              [[ -d /var/lib/mysql/mysql ]] && exit 0
              # Skip the clone on master (ordinal index 0).
              [[ `hostname` =~ -([0-9]+)$ ]] || exit 1
              ordinal=${BASH_REMATCH[1]}
              [[ $ordinal -eq 0 ]] && exit 0
              # Clone data from previous peer.
              #注意名称 pod_name.svc_name
              ncat --recv-only mysql-$(($ordinal-1)).mysql 3307 | xbstream -x -C /var/lib/mysql
              # Prepare the backup.
              xtrabackup --prepare --target-dir=/var/lib/mysql
          volumeMounts:
            #volume的名称
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
      containers:
        - name: mysql
          image: mysql:5.7
          env:
            #密码
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "100.Acjq"
          ports:
            - name: mysql
              containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            - name: conf
              mountPath: /etc/mysql/conf.d
          resources:
            requests:
              cpu: 100m
              memory: 1Gi
          livenessProbe:
            exec:
              #使用mysqladmin的ping检测数据库的健康状态
              command: ["mysqladmin", "ping"]
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
          readinessProbe:
            exec:
              command: ["mysql", "-h", "127.0.0.1", "-e", "SELECT 1"]
            initialDelaySeconds: 50
            periodSeconds: 2
            timeoutSeconds: 10
          #startupProbe:
            #这里没有延迟直接运行
            #exec:
              #使用mysqladmin的ping检测数据库的健康状态
              #command: [ "mysqladmin", "ping" ]
            #failureThreshold: 30
            #periodSeconds: 10
        #使用mysal的binlog主从复制保证主从之间数据一致性
        - name: xtrabackup
          image: fxkjnj/xtrabackup:1.0
          ports:
            - name: xtrabackup
              containerPort: 3307
          command:
            - bash
            - "-c"
            - |
              set -ex
              cd /var/lib/mysql
              
              # Determine binlog position of cloned data, if any.
              if [[ -f xtrabackup_slave_info && "x$(<xtrabackup_slave_info)" != "x" ]]; then
              # XtraBackup already generated a partial "CHANGE MASTER TO" query
              # because we're cloning from an existing slave. (Need to remove the tailing semicolon!)
              cat xtrabackup_slave_info | sed -E 's/;$//g' > change_master_to.sql.in
              # Ignore xtrabackup_binlog_info in this case (it's useless).
              rm -f xtrabackup_slave_info xtrabackup_binlog_info
              elif [[ -f xtrabackup_binlog_info ]]; then
              # We're cloning directly from master. Parse binlog position.
              [[ `cat xtrabackup_binlog_info` =~ ^(.*?)[[:space:]]+(.*?)$ ]] || exit 1
              rm -f xtrabackup_binlog_info xtrabackup_slave_info
              echo "CHANGE MASTER TO MASTER_LOG_FILE='${BASH_REMATCH[1]}',\
              MASTER_LOG_POS=${BASH_REMATCH[2]}" > change_master_to.sql.in
              fi
              
              # Check if we need to complete a clone by starting replication.
              if [[ -f change_master_to.sql.in ]]; then
              echo "Waiting for mysqld to be ready (accepting connections)"
              until mysql -h 127.0.0.1 -e "SELECT 1"; do sleep 1; done
              
              echo "Initializing replication from clone position"
              mysql -h 127.0.0.1 \
              -e "$(<change_master_to.sql.in), \
              MASTER_HOST='mysql-0.mysql', \
              MASTER_USER='root', \
              MASTER_PASSWORD='', \
              MASTER_CONNECT_RETRY=10; \
              START SLAVE;" || exit 1
              # In case of container restart, attempt this at-most-once.
              mv change_master_to.sql.in change_master_to.sql.orig
              fi
              
              # Start a server to send backups when requested by peers.
              exec ncat --listen --keep-open --send-only --max-conns=1 3307 -c \
              "xtrabackup --backup --slave-info --stream=xbstream --host=127.0.0.1 --user=root"
          volumeMounts:
            #使用的是pvc
            - name: data
              mountPath: /var/lib/mysql
              subPath: mysql
            #普通的volume pod中定义 nfs empty cm secret hostpath的普通的volume
            #hostpath类型的pv
            - name: conf
              mountPath: /etc/mysql/conf.d
          resources:
            requests:
              cpu: 100m
              memory: 100Mi
      #pod的volume
      volumes:
        - name: conf
          emptyDir: {}  #pod生命周期
        - name: config-map
          configMap:
            name: mysql
  #pvc声明 statefulset.spec
  volumeClaimTemplates:
    - metadata:
        name: data  #data-mysql-0 pv_name-pod_name
      spec:
        accessModes: ["ReadWriteOnce"]
        storageClassName: nfs  #不指定就自己创建pv绑定pvc
        resources:
          requests:
            storage: 5Gi
---
#apiVersion: policy/v1beta1
#kind: PodDisruptionBudget  #pod中断预算
#metadata:
#  name: mysql-pdb
#  labels:
#    pdb: mysql
#spec:
#  minAvailable: 2  #.spec.minAvailable：表示发生自愿中断的过程中，要保证至少可用的Pods数或者比例 .spec.maxUnavailable：表示发生自愿中断的过程中，要保证最大不可用的Pods数或者比例
#  #通过标签匹配,注意标签的重复性
#  selector:
#    matchLabels:
#      app: mysql
